import { NextAuthOptions } from 'next-auth'
import { UpstashRedisAdapter } from '@next-auth/upstash-redis-adapter'
import { db } from './db'
import GoogleProvider from 'next-auth/providers/google'
import { fetchRedis } from '@/helpers/redis'

function getGoogleCredentials() {
  const clientId = process.env.GOOGLE_CLIENT_ID
  const clientSecret = process.env.GOOGLE_CLIENT_SECRET

  if (!clientId || clientId.length === 0) {
    throw new Error('Missing GOOGLE_CLIENT_ID')
  }

  if (!clientSecret || clientSecret.length === 0) {
    throw new Error('Missing GOOGLE_CLIENT_SECRET')
  }

  return { clientId, clientSecret }
}

export const authOptions: NextAuthOptions = {
  adapter: UpstashRedisAdapter(db),
  session: {
    // wee dont save session in db
    // we can verify sessions in Middleware
    // to prrotect routes way more easily
    strategy: 'jwt',
  },

  pages: {
    signIn: '/login',
  },
  providers: [
    GoogleProvider({
      clientId: getGoogleCredentials().clientId,
      clientSecret: getGoogleCredentials().clientSecret,
    }),
  ],
  callbacks: {
    // events which happen when spme events happen 
    // when detetcted by nextauth
    async jwt({ token, user }) {
      //  whenever i logged in with any account
      // it will show that i logged in with the very first id accoutn
      // coz of some weird caching behaviour of NEXTJS 
      // whihc caches the forst id we used to log in 
      // so we discard this method
      // const dbUser - (await db.get(`user:${token.id}`)) as User | null
      
      
      // tokenid is generated by upstashRedisAdapter
      // we dont make it khudse

      // fetchRedis is our own helper
      // it bypasses that caching behaviour
      const dbUserResult = (await fetchRedis('get', `user:${token.id}`)) as
        | string
        | null

      if(!dbUserResult) {
        if (user) {
          // ! -> an assertion taht this type exists 
          token.id = user!.id
        }

        return token
      }

      const dbUser = JSON.parse(dbUserResult) as User

      return {
        id: dbUser.id,
        name: dbUser.name,
        email: dbUser.email,
        picture: dbUser.image,
      }
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.id
        session.user.name = token.name
        session.user.email = token.email
        session.user.image = token.picture
      }

      return session
    },
    redirect() {
      return '/dashboard'
    },
  },
}